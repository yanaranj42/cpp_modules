#include "Test.hpp"
#include "DerivedA.hpp"
#include "Inherit.hpp"
int main()
{
	/* Is just a simple test to see how dinamyc memory works*/
	{
		std::cout << BLUE"--------BASIC---------" << END << std::endl;
		std::cout << YELLOW"Stack" << std::endl;
		Test a;
		Test b(a);
		std::cout << "> a type is: " << a.getType() << std::endl;
		std::cout << "> b type is: " << b.getType() << std::endl;
		
		std::cout << BLUE"Heap" << std::endl;
		Test *c = new Test();
//		Test *d;
		std::cout << "> c type is: " << c->getType() << std::endl;
		delete c;
	}
		std::cout << "FINISH BASIC" << std::endl;
	{
	/* */
		std::cout << std::endl << BLUE"---------DERIVED_A---------" << END << std::endl;
		DerivedA a;
		//DerivedA *cp = a;//error de conversion en la inicializacion
		DerivedA *cp = new DerivedA();
		DerivedA other = DerivedA();
		std::cout << "a_Type: "  << a.getType() << std::endl;
		std::cout << "cp_Type: "  << cp->getType() << std::endl;
		std::cout << other_Type: "  << other->getType() << std::endl;
		delete cp;
		std::cout << END;
	}


	{
		std::cout << std::endl << BLUE"---------INHERIT---------" << END << std::endl;
		std::cout << YELLOW"Test class - Inherit class:" << END << std::endl;
		Test *a = new Inherit();
//		Inherit b = new Inherit();//Error de conversion
		std::cout << YELLOW"Inherit class - Inherit class:" << END << std::endl;
		Inherit *c = new Inherit("Pinky");
		std::cout << YELLOW"Copy Inherit class:" << END << std::endl;
		Test *cp = new Inherit (*(static_cast<const Inherit*>(c)));//copia del obj del ptr

		std::cout << GREEN"Type: "  << a->getType() << std::endl;
		std::cout << "Type: "  << c->getType() << std::endl;
		std::cout << "Type copy: "  << cp->getType() << std::endl;
		std::cout << END;
		std::cout << BLUE"aWord: " << a->getWord() << std::endl;
		std::cout << BLUE"cpWord: " << cp->getWord() << std::endl;
		std::cout << BLUE"c_Word: " << c->getWord() << std::endl;
		c->setWord("Obrigada");
		std::cout << BLUE"c_newWord: " << c->getWord() << std::endl;
		std::cout << END;
		delete a;
		delete c;
		delete cp;
	}
}
